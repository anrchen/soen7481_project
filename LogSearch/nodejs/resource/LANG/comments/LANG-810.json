[I think it's the Javadoc that is wrong, because the method is called internally e.g. here:

{code}
public static String join(Object[] array, char separator) {
     ...
     return join(array, separator, 0, array.length);
}
{code}

If the Javadoc is correct, then that method also needs to be fixed., The parameter description for join(Object array, String sep, int begining inde, int end index) is wrong as it states that the last index is exclusive and must not go past the end of the array. So the description is wring or the implementation is wrong. The suggest fix fixes it and then the javadoc also needs changing.
, Sorry, but I cannot see what should be wrong here. Javadoc states that endIndex is exclusive and that's exactly what the method does and what is required in the implementation of Sebb's comment (the valid array index runs from 0 to array.length-1)., Joerg, Thanks for your quick response to this issue.

Re: (the valid array index runs from 0 to array.length-1)
Not the case. It accepts array.length as a valid endIndex.


According to the spec: 

     "endIndex - the index to stop joining from (exclusive). It is an error to pass in an end index past the end of the array"

The last index is array.length-1. The method accepts array.length as the last index which is against the stipulation that "it is an error to pass in an end index past the end of the array."

It would be correct to say:

     "endIndex - the index to stop joining from (exclusive). It is an error to pass in an end index GREATER THAN THE LENGTH OF THE ARRAY"


Also, it would be help to have an example with the others such as:

     StringUtils.join(["A", "B", "C"], ":",1,3)   = "B:C"
, Basically {{endIndex}} takes values from 1 to array.length instead of from 0 to {{(array.length - 1)}}
In current state {{endIndex}} is "1-based index", not "0-based index" while Java language uses 0-based indexes, also previous argument {{startIndex}} is 0-based.

If you put valid endIndex 0, the for loop won't run at all as it checks (i < endIndex) like it was array's length.

Let's say you have 1 element array to join (it does not make practical sense, bu should work), it has index 0 and does not have anything beyond 0 index. 
According to JavaDoc only possible combination of startIndex and endIndex would be (0,0).
{{StringUtils.java, line 3394: for (int i = startIndex; i < endIndex; i++) {}}
However for loop will not execute even single time because {{(i = startIndex = 0)}} is not lower than {{(endIndex = 0)}}, it is equal to endIndex and the result of joining single element array from it's only index 0 to index 0 will be empty string.

Therefore to join that one-element array you need to use combination {{(startIndex = 0, endIndex = 1)}}, where {{(endIndex == array.length)}} is error according to JavaDoc:
"endIndex - the index to stop joining from (exclusive). *It is an error to pass in an end index past the end of the array*"

Example code:
{code:title="test.java"}
import org.apache.commons.lang3.StringUtils;

public class Test {
	public static void main(String[] args) {
		String[] array = new String[] { "0", "1", "2", "3" };

		printResult(array, 0, 0);
		printResult(array, 0, 1);
		printResult(array, 1, 1);
		printResult(array, 2, 3);
		printResult(array, 0, 3);
		printResult(array, 0, 4);
	}

	public static void printResult(String[] array, int startIndex, int endIndex) {
		System.out.println("Running:\tStringUtils.join(array, \" \", " + startIndex + ", " + endIndex + ");");
		System.out.println("Result: \t" + StringUtils.join(array, " ", startIndex, endIndex));
		System.out.println("array[" + startIndex + "]:\t'" + array[startIndex] + '\'');
		System.out.println("array[" + endIndex + "]:\t'" + array[endIndex] + '\'');
		System.out.println();
	}
}
{code}

Now tell me what is wrong with the code, because result is:
{code}
Running:	StringUtils.join(array, " ", 0, 0);
Result: 	
array[0]:	'0'
array[0]:	'0'

Running:	StringUtils.join(array, " ", 0, 1);
Result: 	0
array[0]:	'0'
array[1]:	'1'

Running:	StringUtils.join(array, " ", 1, 1);
Result: 	
array[1]:	'1'
array[1]:	'1'

Running:	StringUtils.join(array, " ", 2, 3);
Result: 	2
array[2]:	'2'
array[3]:	'3'

Running:	StringUtils.join(array, " ", 0, 3);
Result: 	0 1 2
array[0]:	'0'
array[3]:	'3'

Running:	StringUtils.join(array, " ", 0, 4);
Result: 	0 1 2 3
array[0]:	'0'
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 4
	at Test.printResult(Test.java:20)
	at Test.main(Test.java:12)
{code}

Oh so came up that after fixing that for loop, starting from line 3387 another bug emerges:
{code}

        int noOfItems = endIndex - startIndex;
        if (noOfItems <= 0) {
            return EMPTY;
        }
{code}
should be:
{code}

        int noOfItems = endIndex - startIndex + 1;
        if (noOfItems <= 0) {
            return EMPTY;
        }
{code}
because joining one element should return that one exact element, not an empty string., added proposed fix, added proposed junit test with some debug printfing, ?? Sorry, but the result is exactly what is expected. There's no fix required. It's just Javadoc that has to be clarified. endIndex is exclusive., So 3.2 - javadoc fix?, OK with me to just fix Javadoc, Anyone who know String.substring(start,end) would be familiar with how this works. However, the Javadoc is not quite as clear with this method.
Also, the  reference to end index in the startIndex parameter description should be removed in its entirety. My suggestion is:

== OLD ==

Parameters:
array - the array of values to join together, may be null
separator - the separator character to use, null treated as ""
startIndex - the first index to start joining from. It is an error to pass in an end index past the end of the array
endIndex - the index to stop joining from (exclusive). It is an error to pass in an end index past the end of the array

== NEW ==

Parameters:
array - the array of values to join together, may be null
separator - the separator character to use, null treated as ""
startIndex - the first index to start joining from
endIndex - the index to stop joining from (exclusive). It is an error to pass in an end index past the end of the array

The number of elements joined equals (endIndex - beginIndex). This will throw an exception if the endIndex is larger than the length of the array.


That clears it up for me because it clearly describes the condition that will fail and how to calculate the length as well. , Added clarifying Javadoc and examples:

URL: http://svn.apache.org/viewvc?rev=1384145&view=rev
Log:
LANG-810 StringUtils.join() endIndex, bugged for loop

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/StringUtils.java
, The example in the svn JAVADOC is for the different method:

OLD

3169	     * <pre>
3170	     * StringUtils.join(null, *)               = null
3171	     * StringUtils.join([], *)                 = ""
3172	     * StringUtils.join([null], *)             = ""
3173	     * StringUtils.join(["a", "b", "c"], ';')  = "a;b;c"
3174	     * StringUtils.join(["a", "b", "c"], null) = "abc"
3175	     * StringUtils.join([null, "", "a"], ';')  = ";;a"
3176	     * </pre>


SHOULD READ SOMETHING LIKE THIS

StringUtils.join(null,'a',0,0)                   = null
StringUtils.join(null,'a',999,999)               = null
StringUtils.join([],'a',0,0)                     = ""
StringUtils.join([],'a',0,1)                     = ERROR
StringUtils.join(["a", "b", "c"], ';',0,1)       = "a"
StringUtils.join(["a", "b", "c"], ';',0,2)       = "a;b"
StringUtils.join(["a", "b", "c"], ';',0,3)       = "a;b;c"
StringUtils.join([null, null, "a"], ';',0,2)     = ";;"
StringUtils.join([null, null, "a"], ';',0,3)     = ";;a"
, my error. I looked at the wrong svn code!

It looks very good now with good examples and very easy to understand.
, Check the recent commit which also updated the examples.]