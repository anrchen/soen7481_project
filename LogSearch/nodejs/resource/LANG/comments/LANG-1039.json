[This method works by examining the fields of an object and creating a cumulative hashcode based upon them. Given that an array has no fields, this behaviour seems correct to me (albeit a little counter-intuitive).

If those arrays had been contained within an object (the normal use case), your results would not be observed. Your results are identical to what you'd see if you simply called {{HashCodeBuilder.reflectionHashCode(new Object())}}., The Javadoc for method HashCodeBuilder.reflectionHashCode states:
{quote}"This method uses reflection to build a valid hash code."{quote}
And a valid hashCode implementation indeed doesn't have to produce distinct values for different instances:
{quote}
As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the JavaTM programming language.)
{quote}

However in this particular implementation we can apply "the principle of least astonishment":
{quote}
If a necessary feature has a high astonishment factor, it may be necessary to redesign the feature.
{quote}

One can be astonished seeing how this method returns the same value (namely 17) for every array, no matter how big or of what type., The first line in the Javadoc for the {{HashCodeBuilder}} is:

bq. Assists in implementing {{Object.hashCode()}} methods.

In other words. the supported use case is generating a hash code for your own custom class. You either do this manually by appending fields to the hash code builder, or you use the reflective builder:

{code:java}
public int hashCode() {
  return HashCodeBuilder.reflectionHashCode(this);
}
{code}

There is no expectation that {{reflectionHashCode()}} will be passed a primitive array object. I see no reason to change this behaviour, given the documented intention of the class., {quote}
The first line in the Javadoc for the HashCodeBuilder is:
bq. Assists in implementing Object.hashCode() methods.
{quote}

and the second line in the Javadoc is:
bq. This class enables a good hashCode method to be built for any class.

This is the interface:
reflectionHashCode(Object object, String... excludeFields)
It promises, that it will work for any given Object.
It doesnt say, that it isn't for arrays.
Neither does Javadoc.

So I see two options:
1. To add statement like: "Warning: This method provides constant result of 17 for any array."
2. To refactor this method for consistency.

Living it the way it is is simply irresponsible.

, Could you describe your use case in more detail? As I've explained, our expectation is for this method to be used to help you override {{Object.hashCode()}} when creating your own class. Consequently, we were not expecting to be passed an array as an argument.

It would be helpful to understand how you are trying to use it, so we can better decide if this is a use case we want to support. If it is, we can look at altering the class behaviour. If it's not, then we can look to improve the Javadocs to avoid similar confusion in the future., There is no such use case. 
We've only found a bug in this method, that is all.
So we are telling you about it to be helpful and to improve your library.
If you say:
{quote}
Consequently, we were not expecting to be passed an array as an argument.
{quote}
than you must allways remember, that your code should be idiot-proof.
You cannot simply expect, that your code will be used according to your guides - you have to enforce this.

I'm sure you will come up with some good solution.
Good luck., Then for consistency let's make all these methods: {code}HashCodeBuilder.append(boolean[])
HashCodeBuilder.append(char[])
HashCodeBuilder.append(byte[])
HashCodeBuilder.append(double[])
HashCodeBuilder.append(int[])
HashCodeBuilder.append(Object[])
HashCodeBuilder.append(long[])
HashCodeBuilder.append(short[])
HashCodeBuilder.append(float[]){code}
return 17 ;), Since there isn't a new use case being discussed, I'm content that the class can remain as it is (functionally). To avoid any future confusion about how the method works, I've made some adjustments to the Javadoc to make it clear that a constant result is return if the supplied object has no fields to include in the hash code.

---

Author: djones
Date: Fri Sep 26 21:19:12 2014
New Revision: 1627889

URL: http://svn.apache.org/r1627889
Log:
Made it clear that the fields of the object form the hash code (LANG-1039).
Pulled magic values into constants.

Modified:
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java
, Thank you., Thank you!]