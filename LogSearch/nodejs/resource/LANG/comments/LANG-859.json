[Fixed org.apache.commons.lang.Escape.escape() method for XML    

{code}
    protected void escape(Writer writer, String text) throws IOException {
        int len = text.length();
        for (int i = 0; i < len; i++) {
            char c = text.charAt(i);
            String entity = entityName(c);
            if (entity == null) {
                // TODO: notice escaping for invalid characters added
                if (c > 0x7F || XMLChar.isInvalid(c)) {
                    writer.write("&#");
                    writer.write(Integer.toString(c, 10));
                    writer.write(';');
                } else {
                    writer.write(c);
                }
            } else {
                writer.write('&');
                writer.write(entity);
                writer.write(';');
            }
        }
    }
{code}, In version 3.x, you can do:

{code:java}
    @Test
    public void testEscapeXmlAllCharacters() {
        // http://www.w3.org/TR/xml/#charsets says:
        // Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF] /* any Unicode character,
        // excluding the surrogate blocks, FFFE, and FFFF. */
        CharSequenceTranslator escapeXml = StringEscapeUtils.ESCAPE_XML
                .with(NumericEntityEscaper.below(9), NumericEntityEscaper.between(0xB, 0xC), NumericEntityEscaper.between(0xE, 0x19),
                        NumericEntityEscaper.between(0xD800, 0xDFFF), NumericEntityEscaper.between(0xFFFE, 0xFFFF), NumericEntityEscaper.above(0x110000));

        assertEquals("&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8;", escapeXml.translate("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008"));
        assertEquals("\t", escapeXml.translate("\t")); // 0x9
        assertEquals("\n", escapeXml.translate("\n")); // 0xA
        assertEquals("&#11;&#12;", escapeXml.translate("\u000B\u000C"));
        assertEquals("\r", escapeXml.translate("\r")); // 0xD
        assertEquals("Hello World!", escapeXml.translate("Hello World!"));
    }
{code}

See testEscapeXmlAllCharacters in https://svn.apache.org/repos/asf/commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java, Despite that, should the ESCAPE_XML change to cover these?, Or introduce ESCAPE_XML_1_0 and ESCAPE_XML_1_1, since the valid charstet is different between the two specs., I'm closing this issue as "Won't Fix", because StringEscapeUtils#escapeXml was deprecated almost three years ago and replaced by escapeXml10 and escapeXml11.]