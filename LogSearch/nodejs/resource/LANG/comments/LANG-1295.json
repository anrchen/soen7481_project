[Unfortunately, this method seems to do exactly what you're not supposed to do with varargs.

We may have to deprecate this and warn people off using it.

I'm going to create another issue for the {{addAll}} method, since the solution (and discussion thereof) is likely to be different., A version of commons-lang containing this method with the @SafeVarargs annotation has not been released yet, so the annotation can just be removed., Agreed, but the bigger question on this issue and LANG-1296 is can we fix the underlying problem and, if not, how best to cope with that., The only solution I can think of here is to deprecate the original method and instead offer:

{code:java}
    @SafeVarargs
    public static <T> T[] toArrayOf(Class<T> clazz, final T... items) {
        if (items == null) {
            return null;
        }
        
        @SuppressWarnings("unchecked")
        T[] result = (T[]) Array.newInstance(clazz, items.length);
        
        System.arraycopy(items, 0, result, 0, items.length);
        return result;
    }
{code}

I believe this new method is safe, since it only relies on the items being of type {{T}}, but doesn't care whether {{items}} is a {{T[]}}.

Thoughts and comments on this issue very welcome!, As I first step I have just removed the SafeVarargs annotation from the method., I am definitely -1 for deprecation. We have a lot of unit tests for this method, that demonstrate, what actually works (incl. indirect generic calls). In the case above, you get a compiler warning for the return value of the method arrayOfTwo if the @SafeVarargs is missing.]