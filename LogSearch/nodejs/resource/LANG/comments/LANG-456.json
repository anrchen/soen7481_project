[BidirectionalTest demonstrating StackOverflowError when using non-reflection HashCodeBuilder methods., Have you tried using UUIDs rather than basing hashCode/equals on "business" fields?, Can you provide a simpler test case that works with Java 1.3 and does not require JAXB?, Does anybody even use JDK 1.3 any more? I haven't had it on my machine in years.

Here's an updated version with all the Jaxb stuff removed, built with JDK 1.4.2 with compiler compliance level set to JDK 1.3, that should work for you. There's no dependencies other than commons-lang and JUnit., Thanks for the updated test case which causes the expected stack overflow.

In fact LANG is currently targeted at Java 1.2 - I believe it may be used by Java ME code, which is not so easily upgraded.

==

Since the HashCode for the Bidirectional class depends on the hash code for the JavBVO class and vice versa, it's not surprising that there is a stack overflow.

If you were not using the HashCodeBuider, how would you define the hashcodes?

, The other builder methods (toString, compare, equals) specifically check for recursive behavior and prevent a StackOverflow.

We use HashCodeBuilder globally on all ValueObjects generated by templates using AndroMDA www.andromda.org. Right now I check for the recursive relationship in the model and remove one side of the relationship from the HashCodeBuilder generated code output. That defaults to the hashCode for all attributes (except the recursive one on one side) plus the hashCode of the ancestor., Moving to 3.1; there's no patch and I don't think a fix would be backwards incompatible [i.e. doesn't have to be done in 3.0]., Attaching my patch (LANG-456-patch.txt) to fix this issue.

I moved the isRegistered()->register()->unregister() code from #reflectionAppend() to #append().
I think this should be more reasonable because #reflectionAppend() invokes #append() method anyway.
Also, #append(Object) code has been improved to check registration status only when the object argument is neither primitive nor String type.

Please take a review.

Cheers,

Woonsan, Thanks Woonsan :) Moving to Review Patch., Applying the patch to my project today resulted in errors both via command line and using Eclipse (guess it's something with my `patch -p0 -i ...` command?). Using Eclipse, however, let me at least copy the test code without the +'s in the beginning of the line. 

After importing the tests from the patch, the bug was reproducible via a new test method. Later I imported the part of the code that fixes the issue, and it worked like a charm. 

+1 to applying the Woonsan's patch, Fixed by applying 0001-LANG-456-HashCodeBuilder-throws-StackOverflowError-i.patch. Thanks to all who helped fixing this., I reverted the commit because it caused LANG-1229. I believe we can not justify a major performance regression to add this feature. The best approach would be to add a new method that appends with the check (see discussion of LANG-1229).]