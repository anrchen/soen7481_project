[Here is a fix for the problem i think, And of course you shouldn't develop before you dring your coffe. Here is a working patch for the same problem., Unfortunately this patch will have to wait until minimum requirement for commons-lang is JDK 5. Currently commons-lang is still compatible to JDK 1.2. However, talk for a JDK 5 version has already started., That is a bit sad.

How likely do you think that the JDK 5 version to be, will it happen within this quarter?

I guess i could try to write a patch that is compatible with java 1.2, but that would require me to do my own parsing of the format that java stores characters in memory, so i would really like to avoid having that code in a library., I've not looked at the code, so this may be nonsense - 

Perhaps you could make the processing conditional - if it finds it's running under JVM 1.5+, then use the JVM Method, otherwise ignore the problem?, Wouldn't you have to use reflection, then?  , Yes, but AFAICT Class.getMethod() is available in Java 1.2.

The method could be fetched in a static block., Of course it is. :)  My point was that we would be engaging in reflection nastiness and it might not be worth it.  I would suggest that if Alexander needs a release sooner that they do an "internal" release from the trunk with the changes applied and then "upgrade" when we get a newer release out.  I don't like the idea of building in the reflection stuff.  We get no compiler checking that way and it leads to unreadable code., Just my 2 cents, I don't need a release that fixes this bug, i stumbled on it by chance and wrote a patch so that the next person that have the same problem that i do won't have to dig through the library in order to understand what's going on.

I'm mainly interested in fixing this because i don't like buggy software, but i totally agree that building in reflection stuff leads to more problems than it solves in the long run.

My opinion on how to fix this is either push for the JDK 1.5 dependency, or write some code that parses the format the strings are stored in memory. The latter might sound complicated but i think it's quite straight forward., svn ci -m "Applying Alexander Kjall's patch from LANG-480; along with a unit test made from his example. Fixes unicode conversion above U+00FFFF being done into 2 characters"

Sending        src/java/org/apache/commons/lang/Entities.java
Sending        src/test/org/apache/commons/lang/StringEscapeUtilsTest.java
Transmitting file data ..
Committed revision 749095.]