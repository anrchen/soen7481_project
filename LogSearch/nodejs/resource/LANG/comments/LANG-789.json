[I tested this on Windows 7 Sun JDK 1.7.0_03 and Ubuntu 10.04 Sun JDK 1.6.0.26, and worked fine. I used this test case:

{code}
    public void testInnerClassImplementsExternalizable() {
        ExternalizableParent parent = new ExternalizableParent("test");
        ExternalizableParent parentClone = SerializationUtils.clone(parent);
        
        assertEquals(parent.toString(), parentClone.toString());
    }
    
    private static final class ExternalizableParent implements Serializable, Externalizable {
        private ExternalizableChild child;

        public ExternalizableParent() {}
        
        public ExternalizableParent(String value) {
            child = new ExternalizableChild(value);
        }
        
        @Override
        public String toString() {
            return child.value;
        }

        public void readExternal(ObjectInput in) throws IOException,
                ClassNotFoundException {
            child = (ExternalizableChild)in.readObject();
        }

        public void writeExternal(ObjectOutput out) throws IOException {
            out.writeObject(child);
        }
    }
    
    private static final class ExternalizableChild implements Serializable, Externalizable {
        public String value;

        public ExternalizableChild() {}
        
        public ExternalizableChild(String value) {
            this.value = value;
        }

        public void readExternal(ObjectInput in) throws IOException,
                ClassNotFoundException {
            value = (String)in.readObject();
        }

        public void writeExternal(ObjectOutput out) throws IOException {
            out.writeObject(value);
        }
    }
{code}

Are you doing something different?, Thanks Marcos, closing this issue now.

It turned out to be a bug in my code elsewhere, and not the clone "bug" issue I submitted.

I was able to run a version of your code that ran fine. Also fixed my own code and disabled the clone workaround I developed for the child class, all works fine now.

Thanks again for looking at this, sorry to waste your time!
]