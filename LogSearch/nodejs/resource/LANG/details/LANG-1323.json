{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13065926","self":"https://issues.apache.org/jira/rest/api/2/issue/13065926","key":"LANG-1323","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310481","id":"12310481","key":"LANG","name":"Commons Lang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310481&avatarId=10011","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310481&avatarId=10011","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310481&avatarId=10011","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310481&avatarId=10011"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10260","id":"10260","description":"Apache Commons components","name":"Commons"}},"fixVersions":[],"aggregatetimespent":null,"resolution":null,"customfield_12312322":null,"customfield_12310220":"2017-04-21T17:02:24.570+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Mon Apr 24 15:07:01 UTC 2017","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":null,"customfield_12312321":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LANG-1323/watchers","watchCount":2,"isWatching":false},"created":"2017-04-21T15:54:37.447+0000","priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.svg","name":"Minor","id":"4"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12317952","id":"12317952","description":"Bug fixes and new features, at least requires Java 6.0","name":"3.2","archived":false,"released":true,"releaseDate":"2014-01-01"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12331955","id":"12331955","description":"New features including Java 9 support","name":"3.5","archived":false,"released":true,"releaseDate":"2016-10-14"}],"issuelinks":[],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2017-04-24T15:07:01.263+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12313197","id":"12313197","name":"lang.reflect.*"}],"timeoriginalestimate":null,"description":"{{TypeUtils}} in {{lang.reflect}} provides convenient methods for creating objects of the interface {{Type}}. Those objects are defined by the following classes:\n\n* ParameterizedTypeImpl (implements {{ParameterizedType}})\n* WildcardTypeImpl (implements {{WildcardType}})\n* GenericArrayTypeImpl (implements {{GenericArrayType}})\n\nSimilarly, there are corresponding classes, which implement the same interfaces, defined in one's particular JDK. And it's these latter classes that are instantiated when you get objects of type {{Type}} via reflection. Let's call these the \"internal {{Type}} implementations.\" In the case of Sun's OpenJDK, [they are defined|http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/reflect/generics/reflectiveObjects] in package {{sun.reflect.generics.reflectiveObjects}}.\n\nEach of the {{TypeUtils}} classes implements {{Object.equals(Object)}} in a general way that's compatible with the internal {{Type}} implementations. For example, if I access a field declared with type {{Map<String, Integer>}} and get its generic type, via {{Field.getGenericType()}}, then that will be equal to the {{TypeUtils}} object returned by:\n{code:java}\nTypeUtils.parameterize(Map.class, String.class, Integer.class)\n{code}\nThat's what I'd expect, so that's great.\n\nHowever, the {{TypeUtils}} classes implement their {{Object.hashCode()}} method in a _different_ way from the corresponding implementations in Sun OpenJDK implementations. That's not so surprising, _but it breaks the contract of {{Object.hashCode()}}_:\n\nbq. If two objects are equal according to the {{equals(Object)}} method, then calling the {{hashCode}} method on each of the two objects must produce the same integer result.\n\nIn other words, the two {{Type}} objects above will both consider themselves {{equals}} to each other, but they have different hash codes.\n\nOne example of a negative consequence of this problem is a collection class that implements its equality (to other collections) by checking hash codes of its elements, e.g., Guava's immutable collections. If you have {{Type}} objects in those collections, with {{TypeUtils}} {{Type}} objects in {{c1}} and Sun OpenJDK {{Type}} objects in {{c2}}, you will see that {{c1.equals(c2)}} returns {{false}} -- because their elements don't all have the same hash codes -- even though those elements are all considered equal.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Type implementations in TypeUtils compute hash code that breaks Object.equals() with Sun's OpenJDK","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=skilpat","name":"skilpat","key":"skilpat","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Kilpatrick","active":true,"timeZone":"America/New_York"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=skilpat","name":"skilpat","key":"skilpat","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Kilpatrick","active":true,"timeZone":"America/New_York"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":"Sun OpenJDK","customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13065926/comment/15978971","id":"15978971","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=skilpat","name":"skilpat","key":"skilpat","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Kilpatrick","active":true,"timeZone":"America/New_York"},"body":"Hash code implementation comparisons:\n\n* {{GenericArrayTypeImpl}}: [TypeUtils|https://git-wip-us.apache.org/repos/asf?p=commons-lang.git;a=blob;f=src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java;h=8db6ca47813389708781c5117f3109865c815d2c;hb=HEAD#l134] vs. [OpenJDK|http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/reflect/generics/reflectiveObjects/GenericArrayTypeImpl.java#l89]\n\n* {{ParameterizedTypeImpl}}: [TypeUtils|https://git-wip-us.apache.org/repos/asf?p=commons-lang.git;a=blob;f=src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java;h=8db6ca47813389708781c5117f3109865c815d2c;hb=HEAD#l203] vs. [OpenJDK|http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/reflect/generics/reflectiveObjects/ParameterizedTypeImpl.java#l198]\n\n* {{WildcardTypeImpl}}: [TypeUtils|https://git-wip-us.apache.org/repos/asf?p=commons-lang.git;a=blob;f=src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java;h=8db6ca47813389708781c5117f3109865c815d2c;hb=HEAD#l270] vs. [OpenJDK|http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/reflect/generics/reflectiveObjects/WildcardTypeImpl.java#l224]","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=skilpat","name":"skilpat","key":"skilpat","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Kilpatrick","active":true,"timeZone":"America/New_York"},"created":"2017-04-21T15:58:57.894+0000","updated":"2017-04-21T15:58:57.894+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13065926/comment/15979077","id":"15979077","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sebb%40apache.org","name":"sebb@apache.org","key":"sebb@apache.org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sebb","active":true,"timeZone":"Etc/GMT"},"body":"Are you saying that some of the TypeUtils classes have incompatible equals() and hashCode() implementations?\n\nIf so, then that is clearly a bug. A test case would be useful.\n\nHowever it is OK to provide a hashCode() implementation that is different from the 'standard' implementation, so long as it is consistent with the equals() defintion.\n\nFor example, if the hashCode() implementation always returns 42.\nIt's a terrible hash, but it does not break the hash/equals contract.\nThere is no requirement for unequal objects to have different hashes.\n\nIndeed any class that assumes that equal hashCodes mean equal Objects is broken.\nObject.hashCode() can produce equal hashCodes for unequal objects.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sebb%40apache.org","name":"sebb@apache.org","key":"sebb@apache.org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sebb","active":true,"timeZone":"Etc/GMT"},"created":"2017-04-21T17:02:24.570+0000","updated":"2017-04-21T17:02:24.570+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13065926/comment/15979111","id":"15979111","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=skilpat","name":"skilpat","key":"skilpat","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Kilpatrick","active":true,"timeZone":"America/New_York"},"body":"Here's an example in JUnit:\n\n{code:java}\n    static class OneField {\n        Map<String, Integer> f;\n    }\n\n    @Test\n    public void test() throws NoSuchFieldException\n    {\n        final Type openJdkType = OneField.class.getDeclaredField(\"f\").getGenericType();\n        final Type apacheType = TypeUtils.parameterize(Map.class, String.class, Integer.class);\n        Assert.assertTrue(openJdkType.equals(apacheType));\n        Assert.assertTrue(apacheType.equals(openJdkType));\n        Assert.assertFalse(openJdkType.hashCode() == apacheType.hashCode());\n\n        // Example with Guava's ImmutableSet, which for N > 1 uses\n        // hash code for set equality, and Iterables.elementsEqual.\n        final Type other = OneField.class;\n        final ImmutableSet<Type> c1 = ImmutableSet.of(openJdkType, other);\n        final ImmutableSet<Type> c2 = ImmutableSet.of(apacheType, other);\n        Assert.assertFalse(c1.equals(c2));\n        Assert.assertFalse(c2.equals(c1));\n        Assert.assertTrue(c1.size() == c2.size());\n        Assert.assertTrue(Iterables.elementsEqual(c1, c2));\n    }\n{code}\n\nIs this not a violation of the contract on {{Object.hashCode()}} that I quoted above? Here are two objects that are equal according to the {{equals(Object)}} method, but calling the {{hashCode}} method on each of the two objects produces different integer results.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=skilpat","name":"skilpat","key":"skilpat","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Kilpatrick","active":true,"timeZone":"America/New_York"},"created":"2017-04-21T17:39:07.567+0000","updated":"2017-04-21T18:40:29.424+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13065926/comment/15979327","id":"15979327","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=skilpat","name":"skilpat","key":"skilpat","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Kilpatrick","active":true,"timeZone":"America/New_York"},"body":"[~sebb@apache.org]: Right, the contract does not say anything about two objects that produce equal hash codes. But it does indeed say something about two objects that are equal, i.e., that they must produce the same hash code. So I'm not saying that anything in {{TypeUtils}} is inconsistent _within itself_, but that\n\n# the {{hashCode}} in {{TypeUtils}} is inconsistent with the {{hashCode}} in the OpenJDK and\n# the contract of {{Object.hashCode}} requires that their {{hashCode}}'s be consistent since their {{equals}} are consistent.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=skilpat","name":"skilpat","key":"skilpat","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Kilpatrick","active":true,"timeZone":"America/New_York"},"created":"2017-04-21T20:28:05.361+0000","updated":"2017-04-21T20:28:05.361+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13065926/comment/15979454","id":"15979454","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sebb%40apache.org","name":"sebb@apache.org","key":"sebb@apache.org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sebb","active":true,"timeZone":"Etc/GMT"},"body":"bq. the hashCode in TypeUtils is inconsistent with the hashCode in the OpenJDK and\n\nThis is not a requirement\n\nbq. the contract of Object.hashCode requires that their hashCode's be consistent since their equals are consistent.\n\nAgreed.\n\nBut the unit test you provided only shows that the ImmutableSet implementation of hashCode/equals is broken.\nIt does not say anything about TypeUtils.\nOr if there is a problem with TypeUtils, this needs to be exposed by a unit test that only uses the LANG classes.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sebb%40apache.org","name":"sebb@apache.org","key":"sebb@apache.org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sebb","active":true,"timeZone":"Etc/GMT"},"created":"2017-04-21T21:49:51.933+0000","updated":"2017-04-21T21:49:51.933+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13065926/comment/15979471","id":"15979471","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=skilpat","name":"skilpat","key":"skilpat","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Kilpatrick","active":true,"timeZone":"America/New_York"},"body":"The Guava stuff was just an _additional example_ of a sneaky manifestation of the bug; it's not crucial to the bug. Sorry to have included more than necessary in that example.\n\nFor posterity, here's the example demonstrating the broken contract, without the additional broken use case: (EDIT: rewritten to clarify that an assertion fails, whereas previously it was written such that they pass)\n\n{code:java}\n    static class OneField {\n        Map<String, Integer> f;\n    }\n\n    @Test\n    public void testOfBrokenContract() throws NoSuchFieldException\n    {\n        // An object of class sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl\n        final Type openJdkType = OneField.class.getDeclaredField(\"f\").getGenericType();\n\n        // An object of class org.apache.commons.lang3.reflect.TypeUtils.ParameterizedTypeImpl\n        final Type apacheType = TypeUtils.parameterize(Map.class, String.class, Integer.class);\n\n        // These two objects are equal...\n        Assert.assertTrue(openJdkType.equals(apacheType));\n        Assert.assertTrue(apacheType.equals(openJdkType));\n\n        // ... so their hash codes should be the same. But this assertion fails.\n        Assert.assertTrue(openJdkType.hashCode() == apacheType.hashCode());\n    }\n{code}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=skilpat","name":"skilpat","key":"skilpat","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Kilpatrick","active":true,"timeZone":"America/New_York"},"created":"2017-04-21T22:04:14.854+0000","updated":"2017-04-21T22:10:08.368+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13065926/comment/15979569","id":"15979569","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sebb%40apache.org","name":"sebb@apache.org","key":"sebb@apache.org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sebb","active":true,"timeZone":"Etc/GMT"},"body":"I see what you mean now. \nIt seems that there are additional equals/hashCode requirements for instances of the Type interface hierarchy which go beyond the normal equals/hashCode contract.\nUnfortunately the requirements don't appear to be fully documented.\n\nThe ParameterizedType Javadoc specifies how the equals() method is to be implemented, but it does not say anything about the hashCode requirements.\n\nThe variables to be compared are known, so the equals() method is easily written from the Javadoc.\n\nHowever there are potentially multiple ways to derive the hashCode.\nI don't see how it's possible to code alternate implementations from the Javadoc alone.\nSo it looks to me as though the Javadoc is incomplete.\nIf the OpenJDK source were not available it would be impossible to implement an object that conforms to the ParameterizedType Javadoc and the equals/hashCode contract.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sebb%40apache.org","name":"sebb@apache.org","key":"sebb@apache.org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sebb","active":true,"timeZone":"Etc/GMT"},"created":"2017-04-21T23:27:52.837+0000","updated":"2017-04-21T23:27:52.837+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13065926/comment/15981268","id":"15981268","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=skilpat","name":"skilpat","key":"skilpat","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Kilpatrick","active":true,"timeZone":"America/New_York"},"body":"Yeah, that makes sense. I understand that the Java SE doesn't -- _but should!_ -- define how to implement {{Type.hashCode}}. There seems to be a years-old JDK bug report about this exact issue: https://bugs.openjdk.java.net/browse/JDK-7082069.\n\nGiven the size and importance of the OpenJDK, however, would it not make sense to treat that as the canonical definition of {{Type.hashCode()}}, and modify the Commons Lang implementations to adhere to that?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=skilpat","name":"skilpat","key":"skilpat","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Kilpatrick","active":true,"timeZone":"America/New_York"},"created":"2017-04-24T14:44:38.246+0000","updated":"2017-04-24T14:44:38.246+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13065926/comment/15981319","id":"15981319","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sebb%40apache.org","name":"sebb@apache.org","key":"sebb@apache.org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sebb","active":true,"timeZone":"Etc/GMT"},"body":"Thanks for the bug URL, very useful.\n\nThere are two difficulties with using the bug text as the definition:\n1) It has not been accepted, and could be modified.\n2) what license covers its use?\n\nAFAICT we cannot use the actual implementation, as that is under the GPL+Classpath exception [1]\n\n[1] http://www.apache.org/legal/resolved.html#category-x","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sebb%40apache.org","name":"sebb@apache.org","key":"sebb@apache.org","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sebb","active":true,"timeZone":"Etc/GMT"},"created":"2017-04-24T15:07:01.263+0000","updated":"2017-04-24T15:07:01.263+0000"}],"maxResults":9,"total":9,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/LANG-1323/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i3dxs7:"}}